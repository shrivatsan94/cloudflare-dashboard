{"ast":null,"code":"var _jsxFileName = \"/Users/shrivatsan/Documents/picanova/cloudflare-explorer/main-app/src/NewCollectiveData.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport React, { Component } from 'react';\nimport { format, parseISO } from \"date-fns\";\nimport moment from 'moment';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewCollectiveData = props => {\n  _s();\n  const startDate = props.startDate;\n  const endDate = props.endDate;\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState({\n    data: []\n  });\n  const [isAlert, setIsAlert] = useState(false);\n  const [alertMessage, setAlertMessage] = useState('');\n  const [afterFetchSite, setAfterFetchSite] = useState('3d.me');\n  const [dataFetch, setDataFetch] = useState(false);\n  const [chartData, setChartData] = useState({});\n  const [site, setSite] = useState('3d.me');\n  let [collectiveData, setCollectiveData] = useState([]);\n  const [collectiveDataFetch, setCollectiveDataFetch] = useState(false);\n  const [dataType, setDataType] = useState('PAGEVIEWS_QUERY,Page Views');\n  const [err, setErr] = useState('');\n  const handleChange = event => {\n    console.log(event.target.value);\n    setDataType(event.target.value);\n  };\n  const handleCollectiveClick = async () => {\n    setIsLoading(true);\n    setCollectiveDataFetch(false);\n    setCollectiveData([]);\n    if (startDate.getTime() > endDate.getTime()) {\n      setIsAlert(true);\n      setAlertMessage('Start Date cannot be greater than end date. Please set it accordingly.');\n    } else if ((endDate.getTime() - startDate.getTime()) / 1000 >= 259200) {\n      console.log(endDate.getTime() - startDate.getTime());\n      setIsAlert(true);\n      setAlertMessage('Range cannot be greater than 3 days. Please set it accordingly.');\n    } else {\n      try {\n        let collectiveDataArray = [];\n        await Promise.all(props.websiteList.map(async value => {\n          setIsAlert(false);\n          setAlertMessage('');\n          setIsLoading(true);\n          var startMonth = (\"0\" + (new Date(startDate).getMonth() + 1)).slice(-2);\n          var endMonth = (\"0\" + (new Date(endDate).getMonth() + 1)).slice(-2);\n          const mendDate = new Date(endDate).getFullYear().toString() + '-' + startMonth + '-' + (\"0\" + new Date(endDate).getDate()).slice(-2);\n          const mstartDate = new Date(startDate).getFullYear().toString() + '-' + endMonth + '-' + (\"0\" + new Date(startDate).getDate()).slice(-2);\n          const PAGEVIEWS_QUERY = `\n             query {\n               viewer {\n                 zones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                   httpRequests1hGroups(\n                     filter: {\n                       date_geq: \"${mstartDate}\",\n             \t\t  date_leq: \"${mendDate}\"\n                     }\n                     limit: 1000\n                     orderBy: [datetime_DESC]\n                   ) {\n                     datetime: dimensions{datetime}\n                     sum {\n                     \tpageViews\n                     }\n                   }\n                 }\n               }\n             }\n             `;\n          const TOPIPADDRESS_QUERY = `\n                query {\n                      \tviewer {\n                      \t\tzones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                            top100IPs: httpRequestsAdaptiveGroups(\n                              filter: {\n                                    date_geq: \"${mstartDate}\",\n                \t\t\t\t\tdate_leq: \"${mendDate}\"\n                              }\n                              limit: 100\n                              orderBy: [\n                                count_DESC\n                              ]\n                            ) {\n                              count\n                \t\t\t  device: dimensions{device: clientIP}\n                      \t}\n                      }\n                      }\n                      }\n                `;\n          const TOPREQUESTSBYCOUNTRY_QUERY = `\n                query {\n                      \tviewer {\n                      \t\tzones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                            top10Countries: httpRequestsOverviewAdaptiveGroups(\n                              filter: {\n                      \t\t\tdate_geq: \"${mstartDate}\"\n                                date_leq: \"${mendDate}\"\n                              }\n                              limit: 10\n                      \t\t\t\torderBy: [ sum_requests_DESC ]\n                            ) {\n                      \t\t\t\tcountryName: dimensions {clientCountryName}\n                      \t\t\t\tsum { requests }\n                      \t}\n                      }\n                      }\n                      }\n                `;\n          const TOP_REFFERERS = `\n                query {\n                  viewer {\n                    zones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                      httpRequestsAdaptiveGroups(\n                        filter: {\n                          date_geq: \"${mstartDate}\",\n                \t\t  date_leq: \"${mendDate}\"\n                        }\n                        limit: 100\n                        orderBy: [count_DESC]\n                      ) {\n                        count\n                        avg {\n                          sampleInterval\n                          __typename\n                        }\n                        sum {\n                          visits\n                          __typename\n                        }\n                        dimensions {\n                          metric: clientRefererHost\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                  }\n                }\n                `;\n          const TOP_PATHS = `\n                query {\n                  viewer {\n                    zones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                      httpRequestsAdaptiveGroups(\n                        filter: {\n                          date_geq: \"${mstartDate}\",\n                \t\t  date_leq: \"${mendDate}\"\n                        }\n                        limit: 100\n                        orderBy: [count_DESC]\n                      ) {\n                        count\n                        avg {\n                          sampleInterval\n                          __typename\n                        }\n                        sum {\n                          visits\n                          __typename\n                        }\n                        dimensions {\n                          metric: clientRequestPath\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                  }\n                }\n                `;\n          const TOP_HOSTS = `\n                query {\n                  viewer {\n                    zones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                      httpRequestsAdaptiveGroups(\n                        filter: {\n                          date_geq: \"${mstartDate}\",\n                \t\t  date_leq: \"${mendDate}\"\n                        }\n                        limit: 100\n                        orderBy: [count_DESC]\n                      ) {\n                        count\n                        avg {\n                          sampleInterval\n                          __typename\n                        }\n                        sum {\n                          visits\n                          __typename\n                        }\n                        dimensions {\n                          metric: clientRequestHTTPHost\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                  }\n                }\n                `;\n          const authorisationToken = \"Bearer \" + process.env.REACT_APP_authorisation_token;\n          const authorisationHeaders = {\n            'X-Auth-Email': process.env.REACT_APP_email_id,\n            'Authorization': authorisationToken,\n            'Content-Type': 'text/plain'\n          };\n          const Query = PAGEVIEWS_QUERY;\n          if (dataType.split(',')[0] === 'PAGEVIEWS_QUERY') {\n            console.log('in pageviews query');\n            const Query = PAGEVIEWS_QUERY;\n          }\n          if (dataType.split(',')[0] === 'TOPIPADDRESS_QUERY') {\n            const Query = TOPIPADDRESS_QUERY;\n          }\n          if (dataType.split(',')[0] === 'TOPREQUESTSBYCOUNTRY_QUERY') {\n            const Query = TOPREQUESTSBYCOUNTRY_QUERY;\n          }\n          if (dataType.split(',')[0] === 'TOP_REFFERERS') {\n            const Query = TOP_REFFERERS;\n          }\n          if (dataType.split(',')[0] === 'TOP_PATHS') {\n            const Query = TOP_PATHS;\n          }\n          if (dataType.split(',')[0] === 'TOP_HOSTS') {\n            const Query = TOP_HOSTS;\n          } else {\n            const Query = PAGEVIEWS_QUERY;\n          }\n          const response = await fetch('http://localhost:8080/api.cloudflare.com:443/client/v4/graphql', {\n            method: 'POST',\n            headers: authorisationHeaders,\n            body: JSON.stringify({\n              query: Query\n            })\n          });\n          const result = await response.json();\n          console.log(result);\n          setData(result);\n          setAfterFetchSite(value.split(',')[1]);\n          try {\n            const labels = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.datetime.datetime);\n            const labelData = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.sum.pageViews);\n            if (dataType.split(',')[0] === 'PAGEVIEWS_QUERY') {\n              const labels = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.datetime.datetime);\n              const labelData = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.sum.pageViews);\n            }\n            if (dataType.split(',')[0] === 'TOPIPADDRESS_QUERY') {\n              const labels = await result.data.viewer.zones[0].top100IPs.map(value => value.device.device);\n              const labelData = await result.data.viewer.zones[0].top100IPs.map(value => value.count);\n            }\n            if (dataType.split(',')[0] === 'TOPREQUESTSBYCOUNTRY_QUERY') {\n              const labels = await result.data.viewer.zones[0].top10Countries.map(value => value.countryName.clientCountryName);\n              const labelData = await result.data.viewer.zones[0].top10Countries.map(value => value.sum.requests);\n            }\n            if (dataType.split(',')[0] === 'TOP_REFFERERS') {\n              const labels = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.dimensions.metric);\n              const labelData = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.count);\n            }\n            if (dataType.split(',')[0] === 'TOP_PATHS') {\n              const labels = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.dimensions.metric);\n              const labelData = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.count);\n            }\n            if (dataType.split(',')[0] === 'TOP_HOSTS') {\n              const labels = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.dimensions.metric);\n              const labelData = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.count);\n            } else {\n              const labels = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.datetime.datetime);\n              const labelData = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.sum.pageViews);\n            }\n            const mydata = {\n              labels: labels,\n              datasets: [{\n                label: dataType.split(',')[1],\n                data: labelData,\n                borderColor: \"rgb(255, 99, 132)\",\n                backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n              }]\n            };\n            setChartData(mydata);\n            setDataFetch(true);\n            const options = {\n              indexAxis: \"x\",\n              elements: {\n                bar: {\n                  borderWidth: 2\n                }\n              },\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: \"right\"\n                },\n                title: {\n                  display: true,\n                  text: `Page Views for ${value.split(',')[1]}`\n                }\n              }\n            };\n            collectiveDataArray.push({\n              barOptions: options,\n              barData: mydata\n            });\n          } catch {\n            const labels = ['na'];\n            const mydata = {\n              labels: labels,\n              datasets: [{\n                label: \"Page Views\",\n                data: 0,\n                borderColor: \"rgb(255, 99, 132)\",\n                backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n              }]\n            };\n            setChartData(mydata);\n            setDataFetch(true);\n            const options = {\n              indexAxis: \"x\",\n              elements: {\n                bar: {\n                  borderWidth: 2\n                }\n              },\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: \"right\"\n                },\n                title: {\n                  display: true,\n                  text: `Page Views for ${value.split(',')[1]}`\n                }\n              }\n            };\n            collectiveDataArray.push({\n              barOptions: options,\n              barData: mydata\n            });\n          }\n        }));\n        setCollectiveData(collectiveDataArray);\n        setCollectiveDataFetch(true);\n        setIsLoading(false);\n        setErr('');\n      } catch (err) {\n        setErr(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  const styleObject = {\n    \"float\": \"left\",\n    \"margin\": \"auto\",\n    \"height\": \"40%\",\n    \"width\": \"100%\"\n  };\n  const barObject = {\n    \"float\": \"left\",\n    \"margin\": \"auto\",\n    \"width\": \"33%\"\n  };\n  const alertObject = {\n    \"color\": \"red\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [err && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: err\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 15\n    }, this), \"Query Type: \", /*#__PURE__*/_jsxDEV(\"select\", {\n      value: dataType,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"PAGEVIEWS_QUERY,Page Views\",\n        children: \"Page Views\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"TOPIPADDRESS_QUERY,Top Ip Addresses\",\n        children: \"Top Ips\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"TOPREQUESTSBYCOUNTRY_QUERY,Top Countries\",\n        children: \"Top Countries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"TOP_REFFERERS,Page Referrers\",\n        children: \"Top referrers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"TOP_PATHS,Paths\",\n        children: \"Top Paths\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"TOP_HOSTS,Hosts\",\n        children: \"Top Hosts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCollectiveClick,\n      children: \"Fetch collective data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 8\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 21\n    }, this), isAlert && /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: alertObject,\n      children: alertMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styleObject,\n      children: collectiveDataFetch && collectiveData.map(bar => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: barObject,\n        children: /*#__PURE__*/_jsxDEV(Bar, {\n          options: bar.barOptions,\n          data: bar.barData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n};\n_s(NewCollectiveData, \"FXB95Olxx0gZpRsz1SV2w2BsO1A=\");\n_c = NewCollectiveData;\nexport default NewCollectiveData;\nvar _c;\n$RefreshReg$(_c, \"NewCollectiveData\");","map":{"version":3,"names":["useState","React","Component","format","parseISO","moment","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","NewCollectiveData","props","startDate","endDate","isLoading","setIsLoading","data","setData","isAlert","setIsAlert","alertMessage","setAlertMessage","afterFetchSite","setAfterFetchSite","dataFetch","setDataFetch","chartData","setChartData","site","setSite","collectiveData","setCollectiveData","collectiveDataFetch","setCollectiveDataFetch","dataType","setDataType","err","setErr","handleChange","event","console","log","target","value","handleCollectiveClick","getTime","collectiveDataArray","Promise","all","websiteList","map","startMonth","Date","getMonth","slice","endMonth","mendDate","getFullYear","toString","getDate","mstartDate","PAGEVIEWS_QUERY","split","TOPIPADDRESS_QUERY","TOPREQUESTSBYCOUNTRY_QUERY","TOP_REFFERERS","TOP_PATHS","TOP_HOSTS","authorisationToken","process","env","REACT_APP_authorisation_token","authorisationHeaders","REACT_APP_email_id","Query","response","fetch","method","headers","body","JSON","stringify","query","result","json","labels","viewer","zones","httpRequests1hGroups","datetime","labelData","sum","pageViews","top100IPs","device","count","top10Countries","countryName","clientCountryName","requests","httpRequestsAdaptiveGroups","dimensions","metric","mydata","datasets","label","borderColor","backgroundColor","options","indexAxis","elements","bar","borderWidth","responsive","plugins","legend","position","title","display","text","push","barOptions","barData","message","styleObject","barObject","alertObject"],"sources":["/Users/shrivatsan/Documents/picanova/cloudflare-explorer/main-app/src/NewCollectiveData.js"],"sourcesContent":["import {useState} from 'react';\nimport React, { Component }  from 'react';\nimport { format, parseISO } from \"date-fns\"\nimport moment from 'moment';\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n} from \"chart.js\";\n\nimport { Bar } from \"react-chartjs-2\";\n\nconst NewCollectiveData = (props) => {\n\nconst startDate = props.startDate\nconst endDate = props.endDate\nconst [isLoading, setIsLoading] = useState(false);\nconst [data, setData] = useState({data: []});\nconst [isAlert, setIsAlert] = useState(false)\nconst [alertMessage, setAlertMessage] = useState('')\nconst [afterFetchSite, setAfterFetchSite] = useState('3d.me');\nconst [dataFetch, setDataFetch] = useState(false);\nconst [chartData, setChartData] = useState({});\nconst [site, setSite] = useState('3d.me');\nlet [collectiveData, setCollectiveData] = useState([]);\nconst [collectiveDataFetch, setCollectiveDataFetch] = useState(false);\nconst [dataType, setDataType] = useState('PAGEVIEWS_QUERY,Page Views');\nconst [err, setErr] = useState('');\n\nconst handleChange = (event) => {\n   console.log(event.target.value)\n   setDataType(event.target.value);\n};\n\nconst handleCollectiveClick = async () => {\n            setIsLoading(true);\n            setCollectiveDataFetch(false);\n            setCollectiveData([]);\n            if(startDate.getTime() > endDate.getTime()){\n                setIsAlert(true);\n                setAlertMessage('Start Date cannot be greater than end date. Please set it accordingly.');\n\n            }\n            else if(((endDate.getTime() - startDate.getTime())/(1000)) >= 259200 ){\n                console.log(endDate.getTime() - startDate.getTime())\n                setIsAlert(true);\n                setAlertMessage('Range cannot be greater than 3 days. Please set it accordingly.');\n            }\n            else{\n            try {\n            let collectiveDataArray=[]\n            await Promise.all(props.websiteList.map(async(value) => {\n             setIsAlert(false);\n             setAlertMessage('');\n             setIsLoading(true);\n             var startMonth = (\"0\" + (new Date(startDate).getMonth()  + 1)).slice(-2)\n             var endMonth = (\"0\" + (new Date(endDate).getMonth()  + 1)).slice(-2)\n             const mendDate = new Date(endDate).getFullYear().toString() + '-' + startMonth + '-' + (\"0\" + (new Date(endDate).getDate())).slice(-2)\n             const mstartDate = new Date(startDate).getFullYear().toString() + '-' + endMonth + '-' + (\"0\" + (new Date(startDate).getDate())).slice(-2)\n             const PAGEVIEWS_QUERY = `\n             query {\n               viewer {\n                 zones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                   httpRequests1hGroups(\n                     filter: {\n                       date_geq: \"${mstartDate}\",\n             \t\t  date_leq: \"${mendDate}\"\n                     }\n                     limit: 1000\n                     orderBy: [datetime_DESC]\n                   ) {\n                     datetime: dimensions{datetime}\n                     sum {\n                     \tpageViews\n                     }\n                   }\n                 }\n               }\n             }\n             `;\n                const TOPIPADDRESS_QUERY = `\n                query {\n                      \tviewer {\n                      \t\tzones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                            top100IPs: httpRequestsAdaptiveGroups(\n                              filter: {\n                                    date_geq: \"${mstartDate}\",\n                \t\t\t\t\tdate_leq: \"${mendDate}\"\n                              }\n                              limit: 100\n                              orderBy: [\n                                count_DESC\n                              ]\n                            ) {\n                              count\n                \t\t\t  device: dimensions{device: clientIP}\n                      \t}\n                      }\n                      }\n                      }\n                `;\n\n                const TOPREQUESTSBYCOUNTRY_QUERY = `\n                query {\n                      \tviewer {\n                      \t\tzones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                            top10Countries: httpRequestsOverviewAdaptiveGroups(\n                              filter: {\n                      \t\t\tdate_geq: \"${mstartDate}\"\n                                date_leq: \"${mendDate}\"\n                              }\n                              limit: 10\n                      \t\t\t\torderBy: [ sum_requests_DESC ]\n                            ) {\n                      \t\t\t\tcountryName: dimensions {clientCountryName}\n                      \t\t\t\tsum { requests }\n                      \t}\n                      }\n                      }\n                      }\n                `;\n\n                const TOP_REFFERERS = `\n                query {\n                  viewer {\n                    zones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                      httpRequestsAdaptiveGroups(\n                        filter: {\n                          date_geq: \"${mstartDate}\",\n                \t\t  date_leq: \"${mendDate}\"\n                        }\n                        limit: 100\n                        orderBy: [count_DESC]\n                      ) {\n                        count\n                        avg {\n                          sampleInterval\n                          __typename\n                        }\n                        sum {\n                          visits\n                          __typename\n                        }\n                        dimensions {\n                          metric: clientRefererHost\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                  }\n                }\n                `;\n\n                const TOP_PATHS = `\n                query {\n                  viewer {\n                    zones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                      httpRequestsAdaptiveGroups(\n                        filter: {\n                          date_geq: \"${mstartDate}\",\n                \t\t  date_leq: \"${mendDate}\"\n                        }\n                        limit: 100\n                        orderBy: [count_DESC]\n                      ) {\n                        count\n                        avg {\n                          sampleInterval\n                          __typename\n                        }\n                        sum {\n                          visits\n                          __typename\n                        }\n                        dimensions {\n                          metric: clientRequestPath\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                  }\n                }\n                `;\n\n                const TOP_HOSTS = `\n                query {\n                  viewer {\n                    zones(filter: { zoneTag: \"${value.split(',')[0]}\" }) {\n                      httpRequestsAdaptiveGroups(\n                        filter: {\n                          date_geq: \"${mstartDate}\",\n                \t\t  date_leq: \"${mendDate}\"\n                        }\n                        limit: 100\n                        orderBy: [count_DESC]\n                      ) {\n                        count\n                        avg {\n                          sampleInterval\n                          __typename\n                        }\n                        sum {\n                          visits\n                          __typename\n                        }\n                        dimensions {\n                          metric: clientRequestHTTPHost\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                  }\n                }\n                `;\n             const authorisationToken = \"Bearer \" + process.env.REACT_APP_authorisation_token;\n             const authorisationHeaders = {\n                         'X-Auth-Email': process.env.REACT_APP_email_id,\n                         'Authorization': authorisationToken,\n                         'Content-Type': 'text/plain'\n             }\n\n            const Query = PAGEVIEWS_QUERY\n\n            if(dataType.split(',')[0] === 'PAGEVIEWS_QUERY'){\n                console.log('in pageviews query')\n                const Query = PAGEVIEWS_QUERY\n            }\n            if(dataType.split(',')[0] === 'TOPIPADDRESS_QUERY'){\n                const Query = TOPIPADDRESS_QUERY\n            }\n            if(dataType.split(',')[0] === 'TOPREQUESTSBYCOUNTRY_QUERY'){\n                 const Query = TOPREQUESTSBYCOUNTRY_QUERY\n            }\n            if(dataType.split(',')[0] === 'TOP_REFFERERS'){\n                const Query = TOP_REFFERERS\n            }\n            if(dataType.split(',')[0] === 'TOP_PATHS'){\n                const Query = TOP_PATHS\n            }\n            if(dataType.split(',')[0] === 'TOP_HOSTS'){\n                const Query = TOP_HOSTS\n            }\n            else{\n                 const Query = PAGEVIEWS_QUERY\n            }\n\n             const response = await fetch('http://localhost:8080/api.cloudflare.com:443/client/v4/graphql', {\n               method: 'POST',\n               headers: authorisationHeaders,\n               body: JSON.stringify({ query: Query })\n             });\n\n            const result = await response.json();\n            console.log(result)\n            setData(result);\n            setAfterFetchSite(value.split(',')[1]);\n            try{\n                const labels = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.datetime.datetime)\n                const labelData = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.sum.pageViews)\n            if(dataType.split(',')[0] === 'PAGEVIEWS_QUERY'){\n                const labels = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.datetime.datetime)\n                const labelData = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.sum.pageViews)\n            }\n            if(dataType.split(',')[0] === 'TOPIPADDRESS_QUERY'){\n                const labels = await result.data.viewer.zones[0].top100IPs.map(value => value.device.device)\n                const labelData = await result.data.viewer.zones[0].top100IPs.map(value => value.count)\n            }\n            if(dataType.split(',')[0] === 'TOPREQUESTSBYCOUNTRY_QUERY'){\n                const labels = await result.data.viewer.zones[0].top10Countries.map(value => value.countryName.clientCountryName)\n                const labelData = await result.data.viewer.zones[0].top10Countries.map(value => value.sum.requests)\n            }\n            if(dataType.split(',')[0] === 'TOP_REFFERERS'){\n                const labels = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.dimensions.metric)\n                const labelData = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.count)\n            }\n            if(dataType.split(',')[0] === 'TOP_PATHS'){\n                const labels = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.dimensions.metric)\n                const labelData = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.count)\n            }\n            if(dataType.split(',')[0] === 'TOP_HOSTS'){\n                const labels = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.dimensions.metric)\n                const labelData = await result.data.viewer.zones[0].httpRequestsAdaptiveGroups.map(value => value.count)\n            }\n            else{\n                const labels = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.datetime.datetime)\n                const labelData = await result.data.viewer.zones[0].httpRequests1hGroups.map(value => value.sum.pageViews)\n            }\n            const mydata = {\n              labels: labels,\n              datasets: [\n                {\n                  label: dataType.split(',')[1],\n                  data: labelData,\n                  borderColor: \"rgb(255, 99, 132)\",\n                  backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n                }\n              ]\n            };\n            setChartData(mydata);\n            setDataFetch(true);\n            const options = {\n              indexAxis: \"x\",\n              elements: {\n                bar: {\n                  borderWidth: 2\n                }\n              },\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: \"right\"\n                },\n                title: {\n                  display: true,\n                  text: `Page Views for ${value.split(',')[1]}`\n                }\n              }\n            };\n            collectiveDataArray.push({\n                barOptions: options,\n                barData: mydata\n            })\n            }catch{\n            const labels = ['na']\n            const mydata = {\n              labels: labels,\n              datasets: [\n                {\n                  label: \"Page Views\",\n                  data: 0,\n                  borderColor: \"rgb(255, 99, 132)\",\n                  backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n                }\n              ]\n            };\n            setChartData(mydata);\n            setDataFetch(true);\n            const options = {\n              indexAxis: \"x\",\n              elements: {\n                bar: {\n                  borderWidth: 2\n                }\n              },\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: \"right\"\n                },\n                title: {\n                  display: true,\n                  text: `Page Views for ${value.split(',')[1]}`\n                }\n              }\n            };\n            collectiveDataArray.push({\n                barOptions: options,\n                barData: mydata\n            })\n            }\n\n            }));\n            setCollectiveData(collectiveDataArray)\n            setCollectiveDataFetch(true)\n            setIsLoading(false);\n            setErr('')\n            }\n            catch (err) {\n                   setErr(err.message);\n            } finally {\n                   setIsLoading(false);\n            }\n            }\n}\n\nconst styleObject = {\n      \"float\": \"left\",\n      \"margin\": \"auto\",\n      \"height\" : \"40%\",\n      \"width\" : \"100%\"\n}\n\nconst barObject = {\n      \"float\": \"left\",\n      \"margin\": \"auto\",\n      \"width\": \"33%\"\n}\n\nconst alertObject = {\n      \"color\": \"red\"\n}\n\n    return (\n    <div>\n      {err && <h2>{err}</h2>}\n      Query Type: <select value={dataType} onChange={handleChange}>\n                     <option value=\"PAGEVIEWS_QUERY,Page Views\">Page Views</option>\n                     <option value=\"TOPIPADDRESS_QUERY,Top Ip Addresses\">Top Ips</option>\n                     <option value=\"TOPREQUESTSBYCOUNTRY_QUERY,Top Countries\">Top Countries</option>\n                     <option value=\"TOP_REFFERERS,Page Referrers\">Top referrers</option>\n                     <option value=\"TOP_PATHS,Paths\">Top Paths</option>\n                     <option value=\"TOP_HOSTS,Hosts\">Top Hosts</option>\n      </select>\n      {<button onClick={handleCollectiveClick}>Fetch collective data</button>}\n      {isLoading && <h2>Loading...</h2>}\n      {isAlert && <h3 style={alertObject}>{alertMessage}</h3>}\n      <div style={styleObject}>\n      {collectiveDataFetch && collectiveData.map((bar) => (\n              <div style={barObject}>\n                {<Bar options={bar.barOptions} data={bar.barData} />}\n              </div>\n      )\n      )\n      }\n      </div>\n    </div>\n    )\n}\n\nexport default NewCollectiveData;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}